begin with problem statement about subcontexts -- wouldn't it be nice if we had something like a library but that has protections
any program has a lot of unused space in its virtual program space -- we can make use of this to implement subcontexts

structure of paper
abstract

introduction
- description of problem statement
- brief overview of subcontexts
- what our prototyping achieves
- limitations -- approximations due to time constraints
- motivation


body
- technical overview of how subcontexts work abstractly theoretically
- diving into the implementation that we chose, maybe a little about why we chose to implement it this way, the limitations of our implementation, the things that we approximated in order to prototype the idea
- takeaways: things that surprised us, lessons that we learned -- we never really figured out why the linker worked, considered implementing matchmaker but ended up just adding protections to the client side


theoretical/practical future work
- figuring out why the linker worked
- implementing more protections
- could use this to implement transitive mappings
- adding this to the kernel, using in user mode

conclusion

a link to the code at the end


