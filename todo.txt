how does libc do symbol resolution?
-- we tried to do this at compile time and it didn't work
-- is there an environment variable that we can pass so that when we run the map symbol, force gcc to resolve every symbol in the file instead of lazy resolution
-- we want to resolve all function symbols when running map.c, even if the function is not called


-- plt vs. got
-- plt is trampoline functions built into the calling function that look up things in the got and doing an indirect function call
-- symbols such as printf and puts fall into this category
-- got changes in second process which is why seg faulting is happening?


-- shared library, not position-independent? use ld load to access
-- generate elf executable by hand?

-- map (snapshot)
-- unmap (mapping a subcontext)

start turning snapshot ability into a library
-- ideally, static library (for now, shared library)
-- create a .a file: compile to .a and .a is an archive 
-- the concatenation of many o files
-- .a files are linked like .o files in your directory, so they are linked in compile time
-- static library is resolved at compile time, as if they were .o files
-- as opposed to dynamic libraries, which are resolved at runtime


-- library that can be picked up by subcontexts, which can 
-- encapsulating map into function that can be called by somebody else
-- param: name of file you want to create that will snapshot your current program
-- dummy function in foo.c and bar.c
-- goal: foo.img and bar.img (server side library)

-- client-side library (map subcontext, name of image file)

-- create_image_file
-- map subcontext


-- process A calls create image file -- copies memory, creates image file
    and immediately dies
-- assumption: everytime you boot up you recreate all the 
-- matchmaker image file in tmp


-- client connects to matchmaker automatically. goes through matchmaker to
    connect to other things
-- matchmaker is responsible for mounting the rest of the things
-- matchmaker should be talking to subcontexts and basically have a table
-- function to talk to subcontexts?


-- look at the documentation for mprotect
-- create the maps but don't necessarily give all the permissions?
-- anything that has execute permissions... 
-- do all maps with mprotect to protection none
    -- client library will have to keep this as a global, list of all mapped
        subcontexts
    -- client library should be able to map multiple subcontexts
-- register SEGV signal handler
-- function call from client into server will cause seg fault which we then
    handle (type, address)
    -- turn on all permissions/turn off permissions for subcontext that I'm in
        (do this second part later)

-- use git to have main/development branch
